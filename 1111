using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

namespace DesktopCalculator
{
    public partial class Form1 : Form
    {
        private decimal lastResult = 0;
        private StringBuilder expressionBuilder = new StringBuilder();
        private Calculator calculator = new Calculator();

        public Form1()
        {
            InitializeComponent();
        }

        private void EqualsTo_Click(object sender, EventArgs e)
        {
            try
            {
                string expression = expressionBuilder.ToString();

                // If there's no new expression, use the last result
                if (expression.Trim() == "")
                {
                    if (lastResult != 0)
                    {
                        expressionBuilder.Append(lastResult);
                        labelCurrentOperation.Text = lastResult.ToString();
                    }
                    return;
                }

                // If the expression ends with '=', replace it with the last result
                if (expression.EndsWith("="))
                {
                    expressionBuilder.Append(lastResult);
                    expression = expression.Substring(0, expression.Length - 1) + lastResult;
                }

                decimal result = calculator.EvaluateExpression(expression);

                // Update the last result
                lastResult = result;

                // Display the complete expression and result
                labelCurrentOperation.Text = expression + " = " + result.ToString();
                textBox_Result.Text = result.ToString();

                // Clear the expression builder
                expressionBuilder.Clear();
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message);
                textBox_Result.Text = "0";
                expressionBuilder.Clear();
            }
        }

        private void InputNumber_click(object sender, EventArgs e)
        {
            Button button = (Button)sender;

            // Append the button's text to the expression builder
            expressionBuilder.Append(button.Text);
            labelCurrentOperation.Text += button.Text;
        }

        private void Operation_Clicked(object sender, EventArgs e)
        {
            Button button = (Button)sender;

            // Append the latest operator to the expression builder
            expressionBuilder.Append(" " + button.Text + " ");
            labelCurrentOperation.Text += " " + button.Text + " ";
        }

        private void ClearEntry_Click(object sender, EventArgs e)
        {
            if (expressionBuilder.Length > 0)
            {
                expressionBuilder.Remove(expressionBuilder.Length - 1, 1);
                labelCurrentOperation.Text = expressionBuilder.ToString();
            }
        }

        private void Clear_Click(object sender, EventArgs e)
        {
            textBox_Result.Text = "0";
            expressionBuilder.Clear();
            labelCurrentOperation.Text = "";
        }

        private void LeftBracket_Click(object sender, EventArgs e)
        {
            expressionBuilder.Append("(");
            labelCurrentOperation.Text += "(";
        }

        private void RightBracket_Click(object sender, EventArgs e)
        {
            expressionBuilder.Append(")");
            labelCurrentOperation.Text += ")";
        }
    }

    public class Calculator
    {
        public decimal EvaluateExpression(string expression)
        {
            try
            {
                return Evaluate(expression);
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException("Error evaluating expression: " + ex.Message);
            }
        }

        private decimal Evaluate(string expression)
        {
            Stack<decimal> operandStack = new Stack<decimal>();
            Stack<char> operatorStack = new Stack<char>();

            int i = 0;
            while (i < expression.Length)
            {
                // Parse number
                StringBuilder numberBuilder = new StringBuilder();
                while (i < expression.Length && (char.IsDigit(expression[i]) || expression[i] == '.'))
                {
                    numberBuilder.Append(expression[i]);
                    i++;
                }

                if (numberBuilder.Length > 0)
                {
                    operandStack.Push(decimal.Parse(numberBuilder.ToString()));
                }

                // Handle operator or bracket
                if (i < expression.Length)
                {
                    char token = expression[i];
                    if (IsOperator(token))
                    {
                        // Handle operators
                        while (operatorStack.Count > 0 && Precedence(operatorStack.Peek()) >= Precedence(token))
                        {
                            PerformOperation(operandStack, operatorStack);
                        }
                        operatorStack.Push(token);
                    }
                    else if (token == '(')
                    {
                        // Handle opening bracket
                        operatorStack.Push(token);
                    }
                    else if (token == ')')
                    {
                        // Handle closing bracket
                        while (operatorStack.Peek() != '(')
                        {
                            PerformOperation(operandStack, operatorStack);
                        }
                        operatorStack.Pop(); // Discard the '('
                    }
                    i++;
                }
            }

            while (operatorStack.Count > 0)
            {
                PerformOperation(operandStack, operatorStack);
            }

            if (operandStack.Count != 1 || operatorStack.Count != 0)
            {
                throw new FormatException("Invalid expression format.");
            }

            return operandStack.Pop();
        }

        private void PerformOperation(Stack<decimal> operandStack, Stack<char> operatorStack)
        {
            char op = operatorStack.Pop();

            if (op == '(')
            {
                // Ignore the opening bracket
                return;
            }

            decimal operand2 = operandStack.Pop();
            decimal operand1 = operandStack.Pop();

            switch (op)
            {
                case '+':
                    operandStack.Push(operand1 + operand2);
                    break;
                case '-':
                    operandStack.Push(operand1 - operand2);
                    break;
                case '*':
                    operandStack.Push(operand1 * operand2);
                    break;
                case '/':
                    if (operand2 == 0)
                    {
                        throw new DivideByZeroException("Cannot divide by zero.");
                    }
                    operandStack.Push(operand1 / operand2);
                    break;
                default:
                    throw new FormatException("Invalid operator.");
            }
        }

        public bool IsOperator(char c)
        {
            return c == '+' || c == '-' || c == '*' || c == '/';
        }

        private int Precedence(char op)
        {
            switch (op)
            {
                case '+':
                case '-':
                    return 1;
                case '*':
                case '/':
                    return 2;
                default:
                    throw new FormatException("Invalid operator.");
            }
        }
    }
}
