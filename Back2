// Calculator.cs
using System;
using System.Collections.Generic;
using System.Text;

namespace CalculatorLogic
{
    public class Calculator
    {
        public decimal EvaluateExpression(string expression)
        {
            try
            {
                // Convert infix expression to postfix using Shunting Yard algorithm
                string postfixExpression = ConvertToPostfix(expression);

                // Evaluate postfix expression
                return EvaluatePostfix(postfixExpression);
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException("Error evaluating expression: " + ex.Message);
            }
        }

        private string ConvertToPostfix(string expression)
        {
            Stack<char> operatorStack = new Stack<char>();
            StringBuilder postfixBuilder = new StringBuilder();

            foreach (char token in expression)
            {
                if (char.IsDigit(token) || token == '.')
                {
                    postfixBuilder.Append(token); // Append operands directly to the postfix expression
                }
                else if (IsOperator(token))
                {
                    // Pop operators with higher or equal precedence from the stack and append to the postfix expression
                    while (operatorStack.Count > 0 && GetPrecedence(token) <= GetPrecedence(operatorStack.Peek()))
                    {
                        postfixBuilder.Append(operatorStack.Pop());
                    }
                    operatorStack.Push(token);
                }
                else if (token == '(')
                {
                    operatorStack.Push(token); // Push left parenthesis to the stack
                }
                else if (token == ')')
                {
                    // Pop operators from the stack and append to the postfix expression until matching left parenthesis is found
                    while (operatorStack.Count > 0 && operatorStack.Peek() != '(')
                    {
                        postfixBuilder.Append(operatorStack.Pop());
                    }
                    operatorStack.Pop(); // Discard the left parenthesis
                }
            }

            // Pop remaining operators from the stack and append to the postfix expression
            while (operatorStack.Count > 0)
            {
                postfixBuilder.Append(operatorStack.Pop());
            }

            return postfixBuilder.ToString();
        }

        private decimal EvaluatePostfix(string postfixExpression)
        {
            Stack<decimal> operandStack = new Stack<decimal>();

            foreach (char token in postfixExpression)
            {
                if (char.IsDigit(token) || token == '.')
                {
                    // Convert operand token to decimal and push onto the operand stack
                    operandStack.Push(decimal.Parse(token.ToString()));
                }
                else if (IsOperator(token))
                {
                    // Pop operands from the stack and perform the operation
                    decimal operand2 = operandStack.Pop();
                    decimal operand1 = operandStack.Pop();

                    switch (token)
                    {
                        case '+':
                            operandStack.Push(operand1 + operand2);
                            break;
                        case '-':
                            operandStack.Push(operand1 - operand2);
                            break;
                        case '*':
                            operandStack.Push(operand1 * operand2);
                            break;
                        case '/':
                            if (operand2 == 0)
                            {
                                throw new DivideByZeroException("Cannot divide by zero.");
                            }
                            operandStack.Push(operand1 / operand2);
                            break;
                        default:
                            throw new FormatException("Invalid operator.");
                    }
                }
            }

            // Result should be the only value left on the operand stack
            if (operandStack.Count != 1)
            {
                throw new FormatException("Invalid postfix expression.");
            }

            return operandStack.Pop();
        }

        private bool IsOperator(char c)
        {
            return c == '+' || c == '-' || c == '*' || c == '/';
        }

        private int GetPrecedence(char op)
        {
            switch (op)
            {
                case '+':
                case '-':
                    return 1;
                case '*':
                case '/':
                    return 2;
                default:
                    throw new FormatException("Invalid operator.");
            }
        }
    }
}
