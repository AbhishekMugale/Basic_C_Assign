using System;

namespace CalculatorLogic
{
    public class Calculator
    {
        public decimal PerformOperation(decimal resultValue, string operation, string inputValue)
        {
            decimal input;
            decimal result = 0;
            if (!decimal.TryParse(inputValue, out input))
            {
                throw new FormatException("Invalid input.");
            }

            if (operation == "")
            {
                result = input;
            }
            else
            {
                string expression = resultValue.ToString() + operation + inputValue;
                result = EvaluateExpression(expression);
            }

            return Math.Round(result, 3);
        }

        private decimal EvaluateExpression(string expression)
        {
            expression = expression.Replace(" ", ""); // Remove any spaces from the expression

            while (expression.Contains("("))
            {
                int startIndex = expression.LastIndexOf('(');
                int endIndex = startIndex + 1;
                int bracketCount = 1;

                while (bracketCount > 0 && endIndex < expression.Length)
                {
                    if (expression[endIndex] == '(')
                    {
                        bracketCount++;
                    }
                    else if (expression[endIndex] == ')')
                    {
                        bracketCount--;
                    }
                    endIndex++;
                }

                string subExpression = expression.Substring(startIndex + 1, endIndex - startIndex - 2);
                decimal subResult = EvaluateExpression(subExpression);

                expression = expression.Substring(0, startIndex) + subResult.ToString() + expression.Substring(endIndex);
            }

            return EvaluateSimpleExpression(expression);
        }

        private decimal EvaluateSimpleExpression(string expression)
        {
            char[] operators = { '*', '/', '+', '-' };

            foreach (char op in operators)
            {
                int index = expression.IndexOf(op);
                while (index != -1)
                {
                    int leftIndex = index - 1;
                    while (leftIndex >= 0 && char.IsDigit(expression[leftIndex]))
                    {
                        leftIndex--;
                    }
                    leftIndex++;

                    int rightIndex = index + 1;
                    while (rightIndex < expression.Length && char.IsDigit(expression[rightIndex]))
                    {
                        rightIndex++;
                    }

                    decimal leftOperand = decimal.Parse(expression.Substring(leftIndex, index - leftIndex));
                    decimal rightOperand = decimal.Parse(expression.Substring(index + 1, rightIndex - index - 1));

                    switch (op)
                    {
                        case '*':
                            expression = expression.Substring(0, leftIndex) + (leftOperand * rightOperand).ToString() + expression.Substring(rightIndex);
                            break;
                        case '/':
                            if (rightOperand == 0)
                            {
                                throw new DivideByZeroException("Cannot divide by zero.");
                            }
                            expression = expression.Substring(0, leftIndex) + (leftOperand / rightOperand).ToString() + expression.Substring(rightIndex);
                            break;
                        case '+':
                            expression = expression.Substring(0, leftIndex) + (leftOperand + rightOperand).ToString() + expression.Substring(rightIndex);
                            break;
                        case '-':
                            expression = expression.Substring(0, leftIndex) + (leftOperand - rightOperand).ToString() + expression.Substring(rightIndex);
                            break;
                    }

                    index = expression.IndexOfAny(operators);
                }
            }

            return decimal.Parse(expression);
        }

        public string ClearEntry(string currentValue)
        {
            return "0";
        }

        public decimal Clear(decimal resultValue)
        {
            return 0;
        }
    }
}
