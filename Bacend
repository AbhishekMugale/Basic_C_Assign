// Calculator.cs
using System;
using System.Collections.Generic;

namespace CalculatorLogic
{
    public class Calculator
    {
        public decimal EvaluateExpression(string expression)
        {
            try
            {
                expression = expression.Replace(" ", ""); // Remove whitespace from the expression
                return Evaluate(expression);
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException("Error evaluating expression: " + ex.Message);
            }
        }

        private decimal Evaluate(string expression)
        {
            if (decimal.TryParse(expression, out decimal number))
            {
                return number; // Base case: If the expression is a single number, return its value
            }

            Stack<decimal> numbers = new Stack<decimal>();
            Stack<char> operators = new Stack<char>();

            for (int i = 0; i < expression.Length; i++)
            {
                char ch = expression[i];
                if (ch == '(')
                {
                    operators.Push(ch);
                }
                else if (ch == ')')
                {
                    while (operators.Peek() != '(')
                    {
                        decimal result = PerformOperation(operators.Pop(), numbers.Pop(), numbers.Pop());
                        numbers.Push(result);
                    }
                    operators.Pop(); // Remove the '(' from the stack
                }
                else if (IsOperator(ch))
                {
                    while (operators.Count > 0 && HasHigherPrecedence(ch, operators.Peek()))
                    {
                        decimal result = PerformOperation(operators.Pop(), numbers.Pop(), numbers.Pop());
                        numbers.Push(result);
                    }
                    operators.Push(ch);
                }
                else
                {
                    StringBuilder sb = new StringBuilder();
                    while (i < expression.Length && (char.IsDigit(expression[i]) || expression[i] == '.'))
                    {
                        sb.Append(expression[i]);
                        i++;
                    }
                    i--; // Move back one step to handle the next character properly
                    numbers.Push(decimal.Parse(sb.ToString()));
                }
            }

            while (operators.Count > 0)
            {
                decimal result = PerformOperation(operators.Pop(), numbers.Pop(), numbers.Pop());
                numbers.Push(result);
            }

            return numbers.Pop();
        }

        private decimal PerformOperation(char operation, decimal b, decimal a)
        {
            switch (operation)
            {
                case '+':
                    return a + b;
                case '-':
                    return a - b;
                case '*':
                    return a * b;
                case '/':
                    if (b == 0)
                    {
                        throw new DivideByZeroException("Cannot divide by zero.");
                    }
                    return a / b;
                default:
                    throw new FormatException("Invalid operator.");
            }
        }

        private bool IsOperator(char c)
        {
            return c == '+' || c == '-' || c == '*' || c == '/';
        }

        private bool HasHigherPrecedence(char op1, char op2)
        {
            int precedence1 = GetPrecedence(op1);
            int precedence2 = GetPrecedence(op2);

            return (precedence1 > precedence2);
        }

        private int GetPrecedence(char op)
        {
            switch (op)
            {
                case '+':
                case '-':
                    return 1;
                case '*':
                case '/':
                    return 2;
                default:
                    throw new FormatException("Invalid operator.");
            }
        }
    }
}
